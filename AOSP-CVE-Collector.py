import requests
import sys
import concurrent.futures
import re
import json

cve_type = ["EoP", "RCE", "ID", "DoS", "N/A"]
android_ver = ["8.0", "8.1", "9", "10", "11", "12", "13", "14"]
base_cve_format = "CVE-{year}-{number}"
base_addr = "https://source.android.com/docs/security/bulletin/"
year_list = ["2017","2018", "2019", "2020", "2021", "2022", "2023", "2024"]
month_list = ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"]
day = "01"

nvd_base_addr = "https://services.nvd.nist.gov/rest/json/cves/2.0?cveId="
#https://services.nvd.nist.gov/rest/json/cves/2.0?cveId=CVE-2019-1010218
#   <tr>
#    <td>CVE-2017-13184</td>
#    <td><a href="https://android.googlesource.com/platform/frameworks/native/+/16392a119661fd1da750d4d4e8e03442578bc543">
#    A-65483324</a></td>
#    <td>EoP</td>
#    <td>High</td>
#    <td>8.0, 8.1</td>
#   </tr>

def user_input():
    if len(sys.argv) < 2:
        print("Usage: python3 AOSP-CVE-Collector.py cve-type")
        sys.exit()
    else:
        if sys.argv[1] not in cve_type:
            print("Invalid CVE type")
            sys.exit()
        else:
            return sys.argv[1]

def fetch_cve_list(url):
    response = requests.get(url)
    cve_list = []

    for cve in response.text.split():
        if cve.startswith(base_cve_format.format(year=url.split('/')[-1][:4], number="")):
            cleaned_cve = re.sub(r'<.*?>|,|\.|<br', '', cve)
            cve_list.append(cleaned_cve)
    return cve_list

def get_cve_list(cve_type):
    urls = [base_addr + year + "-" + month + "-" + day for year in year_list for month in month_list]
    cve_list = []
    with concurrent.futures.ThreadPoolExecutor() as executor:
        results = executor.map(fetch_cve_list, urls)
        for result in results:
            cve_list.extend(result)
    cve_list = remove_overlap(cve_list)
    return cve_list

def fetch_cve_detail(url):
    response = requests.get(url)
    return response.text.split()

def remove_overlap(cve_list):
    return list(set(cve_list))

def print_cve_list(cve_list, cve_type):
    #CVE-발행이 최근에 된 순서대로 출력
    parse_cve_list = []
    for cve in cve_list:
        year = cve.split("-")[1]
        parse_cve_list.append((year, cve))  
    parse_cve_list.sort(reverse=True)
    cve_list = [cve for _, cve in parse_cve_list]

    print("-"*50 + f"{cve_type} cve" + "-"*50)
    for cve in cve_list:
        print(cve)
    return cve



def search_cve(cve):
    print("Input CVE number to search : ")
    cve_number = str(input())
    cve_url = nvd_base_addr + cve_number
    response = requests.get(cve_url)
    cve_detail = json.loads(response.text)
    print(json.dumps(cve_detail, indent=4, sort_keys=True))



def main():
    cve_type = user_input()
    cve_list = get_cve_list(cve_type)
    cve = print_cve_list(cve_list, cve_type)
    search_cve(cve)
    

if __name__ == "__main__":
    main()

